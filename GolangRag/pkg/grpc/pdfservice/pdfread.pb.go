// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: pdfread.proto

package grpcclient

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PdfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
}

func (x *PdfRequest) Reset() {
	*x = PdfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdfread_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfRequest) ProtoMessage() {}

func (x *PdfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdfread_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfRequest.ProtoReflect.Descriptor instead.
func (*PdfRequest) Descriptor() ([]byte, []int) {
	return file_pdfread_proto_rawDescGZIP(), []int{0}
}

func (x *PdfRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type PdfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber      int32     `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	SentenceChunk   string    `protobuf:"bytes,2,opt,name=sentence_chunk,json=sentenceChunk,proto3" json:"sentence_chunk,omitempty"`
	ChunkCharCount  int32     `protobuf:"varint,3,opt,name=chunk_char_count,json=chunkCharCount,proto3" json:"chunk_char_count,omitempty"`
	ChunkWordCount  int32     `protobuf:"varint,4,opt,name=chunk_word_count,json=chunkWordCount,proto3" json:"chunk_word_count,omitempty"`
	ChunkTokenCount int32     `protobuf:"varint,5,opt,name=chunk_token_count,json=chunkTokenCount,proto3" json:"chunk_token_count,omitempty"`
	Embedding       []float32 `protobuf:"fixed32,6,rep,packed,name=embedding,proto3" json:"embedding,omitempty"`
}

func (x *PdfResponse) Reset() {
	*x = PdfResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdfread_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfResponse) ProtoMessage() {}

func (x *PdfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdfread_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfResponse.ProtoReflect.Descriptor instead.
func (*PdfResponse) Descriptor() ([]byte, []int) {
	return file_pdfread_proto_rawDescGZIP(), []int{1}
}

func (x *PdfResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *PdfResponse) GetSentenceChunk() string {
	if x != nil {
		return x.SentenceChunk
	}
	return ""
}

func (x *PdfResponse) GetChunkCharCount() int32 {
	if x != nil {
		return x.ChunkCharCount
	}
	return 0
}

func (x *PdfResponse) GetChunkWordCount() int32 {
	if x != nil {
		return x.ChunkWordCount
	}
	return 0
}

func (x *PdfResponse) GetChunkTokenCount() int32 {
	if x != nil {
		return x.ChunkTokenCount
	}
	return 0
}

func (x *PdfResponse) GetEmbedding() []float32 {
	if x != nil {
		return x.Embedding
	}
	return nil
}

type VectorizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *VectorizeRequest) Reset() {
	*x = VectorizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdfread_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorizeRequest) ProtoMessage() {}

func (x *VectorizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdfread_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorizeRequest.ProtoReflect.Descriptor instead.
func (*VectorizeRequest) Descriptor() ([]byte, []int) {
	return file_pdfread_proto_rawDescGZIP(), []int{2}
}

func (x *VectorizeRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type VectorizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vector []float32 `protobuf:"fixed32,1,rep,packed,name=vector,proto3" json:"vector,omitempty"`
}

func (x *VectorizeResponse) Reset() {
	*x = VectorizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdfread_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorizeResponse) ProtoMessage() {}

func (x *VectorizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdfread_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorizeResponse.ProtoReflect.Descriptor instead.
func (*VectorizeResponse) Descriptor() ([]byte, []int) {
	return file_pdfread_proto_rawDescGZIP(), []int{3}
}

func (x *VectorizeResponse) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

var File_pdfread_proto protoreflect.FileDescriptor

var file_pdfread_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x64, 0x66, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x70, 0x64, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x29, 0x0a, 0x0a, 0x50,
	0x64, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xf3, 0x01, 0x0a, 0x0b, 0x50, 0x64, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43,
	0x68, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x26, 0x0a, 0x10,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x2b, 0x0a, 0x11, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x32, 0xa0, 0x01, 0x0a, 0x0a, 0x50, 0x64, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x42, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x16, 0x2e, 0x70, 0x64, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x64, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x64, 0x66, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x64, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x0d, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x64, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x64, 0x66, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x71, 0x69, 0x61, 0x6e, 0x73, 0x75, 0x6f, 0x31, 0x2f, 0x72, 0x61, 0x67, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pdfread_proto_rawDescOnce sync.Once
	file_pdfread_proto_rawDescData = file_pdfread_proto_rawDesc
)

func file_pdfread_proto_rawDescGZIP() []byte {
	file_pdfread_proto_rawDescOnce.Do(func() {
		file_pdfread_proto_rawDescData = protoimpl.X.CompressGZIP(file_pdfread_proto_rawDescData)
	})
	return file_pdfread_proto_rawDescData
}

var file_pdfread_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pdfread_proto_goTypes = []interface{}{
	(*PdfRequest)(nil),        // 0: pdfservice.PdfRequest
	(*PdfResponse)(nil),       // 1: pdfservice.PdfResponse
	(*VectorizeRequest)(nil),  // 2: pdfservice.VectorizeRequest
	(*VectorizeResponse)(nil), // 3: pdfservice.VectorizeResponse
}
var file_pdfread_proto_depIdxs = []int32{
	0, // 0: pdfservice.PdfService.ExtractText:input_type -> pdfservice.PdfRequest
	2, // 1: pdfservice.PdfService.VectorizeText:input_type -> pdfservice.VectorizeRequest
	1, // 2: pdfservice.PdfService.ExtractText:output_type -> pdfservice.PdfResponse
	3, // 3: pdfservice.PdfService.VectorizeText:output_type -> pdfservice.VectorizeResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pdfread_proto_init() }
func file_pdfread_proto_init() {
	if File_pdfread_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pdfread_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdfread_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdfResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdfread_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdfread_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pdfread_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pdfread_proto_goTypes,
		DependencyIndexes: file_pdfread_proto_depIdxs,
		MessageInfos:      file_pdfread_proto_msgTypes,
	}.Build()
	File_pdfread_proto = out.File
	file_pdfread_proto_rawDesc = nil
	file_pdfread_proto_goTypes = nil
	file_pdfread_proto_depIdxs = nil
}
